Webpage on 443 talks about REST API. This is probably the path to initial foothold.

Firefox could not reach API page, so added 10.10.10.110 api.craft.htb to the /etc/hosts file

Retrying page and adding security exception allows the API page to be reached. 

Transmits JSON data 

Second link is a link to the documentation for the craft api. 

Downloaded API zip file

Looking at the doc's issue tracker, I think I found an API key 
curl -H 'X-Craft-API-Token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoidXNlciIsImV4cCI6MTU0OTM4NTI0Mn0.-wW1aJkLQDOE-GP5pQd3z_BJTe2Uo0jJ_mQ238P5Dqw' -H "Content-Type: application/json" -k -X POST https://api.craft.htb/api/brew/ --data '{"name":"bullshit","brewer":"bullshit", "style": "bullshit", "abv": "15.0")}'

Proper format for this:

curl -X POST -k "https://api.craft.htb/api/brew/" -H "X-Craft-API-Token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiZGluZXNoIiwiZXhwIjoxNTY0Nzk5Nzk4fQ.r0i2g3xIGUwcdRR_xV6kMGbWK_An-hBWsNruOGBkdVs" -H "accept: application/json" -H  "Content-Type: application/json" -d "{  \"id\": 115,  \"brewer\": \"hackthisbox\",  \"name\": \"Iwanttobeapentester\",  \"style\": \"tryharder\",  \"abv\": \"hack\"}"

Which outputs invalid token, or token missing.

I think I need to download the git repo, find a way to make my own token, then I will be able to post to the brew api. 

How I think this should go:

	1) Find creds to log into /api/auth/login
	2) Create API token
	3) Use API token to make a post to the API
	4) I have no clue what to do after this 


Found creds for dinesh by looking through dinesh's history. Turns out he left his creds in an old commit. 

dinesh:4aUh0A8PbVJxgd 

Using these on /api/auth/login grants me an API token. 

Turns out that I dont need to create a token. I can put the credentials into test.py under tests folder and post from there. 

Wrote exploit 

gained shell by using exploit, give it /bin/sh -i to get tty

Now, settings.py can be read and we get some creds. 

Content:
# Flask settings
FLASK_SERVER_NAME = 'api.craft.htb'
FLASK_DEBUG = False  # Do not use debug mode in production

# Flask-Restplus settings
RESTPLUS_SWAGGER_UI_DOC_EXPANSION = 'list'
RESTPLUS_VALIDATE = True
RESTPLUS_MASK_SWAGGER = False
RESTPLUS_ERROR_404_HELP = False
CRAFT_API_SECRET = 'hz66OCkDtv8G6D'

# database
MYSQL_DATABASE_USER = 'craft'
MYSQL_DATABASE_PASSWORD = 'qLGockJ6G2J75O'
MYSQL_DATABASE_DB = 'craft'
MYSQL_DATABASE_HOST = 'db'
SQLALCHEMY_TRACK_MODIFICATIONS = False

By using dbtest in the shell, i can change it to query users, however, I only get dinesh and the password I had before. I can log in as him on the repo.

So it turns out that fetchone() in cursor in dbtest has to be changed to fetch all, otherwise it will only return 1 result. 

ebachman:llJ77D8QFkLPQB
gilfoyle:ZEU3N8WNM2rh4T

Cannot ssh as any of these guys, but can acces the git repo as gilfoyle look at a private repo of his.

Got his rsa key.

Although it asks for a pass, the passphrase is just gilfoyles password. 

He has a small file named .vault-token in his home

vault token: f1783c8d-41c7-0b12-d1c1-cf2aa17ac6b9

Authenticated using 
vault login token=f1783c8d-41c7-0b12-d1c1-cf2aa17ac6b9

Able to list secrets by using vault secrets list

Can view content of secrets with vault list secrets/

can read secrets with vault read secrets/my-key 

Got root by 

1) vault write ssh/roles/root_otp key_type=otp default_user=root cidr_list = 0.0.0.0/0

2) vault write ssh/creds/root_otp ip=10.10.10.110

3) ssh root@10.10.10.110

4) Copy the key that was printed into the password field when prompted

root.txt = 831d64ef54d92c1af795daae28a11591


Tools used
==========================
Operating system: Kali Linux – A Linux distribution designed for penetration testing
OpenVPN – An open-source program used for creating a VPN connection to hackthebox.eu servers, which allows for connection to the target. 
Nmap – A network scanner used to scan networks and systems. Discovers hosts, services, OS detection, etc.
HashiCorp Vault - A secrets/credential manager (installed on target machine) 

Summary of Results
==========================
Craft was a great box that emphasized custom exploitation, as well as light forensic work. Starting with the initial enumeration, is is found that only ports 22 and 443 are open. Exploring the web page shows two links: an API page and Gogs repository page for the API. By searching through the history and changes to files, a set of credentials can be found for one of the collaborators on the project, Dinesh. These can then be used in a custom python exploit to generate an API token and make POST requests to the API. Then, taking advantage of a python eval() function in the source code of the application, RCE commands can be issued to the target. This allows a shell to be created. Upon using the shell, it is found that the connection is to a Docker container on the host, not the host itself. However, utilizing another custom exploit on the shell allows the usernames and passwords of the collaborators to be obtained from a MySQL query. The credentials for the user "Gilfoyle" gain access to his account on the Gogs repository. Looking through his private repository files reveals his private SSH key, which is used to gain SSH access to Craft.

Gaining root starts by searching further through his private repository files and finding scripts to create a root one-time-password SSH key in Vault. By using this script, a root OTP can be created, then used to gain a SSH shell into Craft. 


Vulns
==========================
1) Dinesh credentials in change history on Gogs - Credentials should never be hard coded into programs, escpecially when the program is public facing like the API is. While this was edited to remove the username and password from test.py, they can still be viewed in the history of the commits. Reccomended action is to not write credentials into programs, and to instead use variables that are not public, or take user input (that is validated and handled properly to avoid buffer overflows and other attacks) into the program. 
2) python eval() function for ABV - Though it solved the invalid ABV values problem, using eval() opens a massive vulnerability. This function causes input to be executed, so passing commands such as import os, then netcat using os.system, caused a shell to be spawned with the attacking machine. A solution is to replace dangerous functions like eval() and exec() with ast.literal_eval() can help to enusre that malicious code is not processed by the application. 
3) Usernames and passwords stored in cleartext on database - The usernames and passwords within the "user" database are stored in cleartext, which allows anyone who can query the database to see the passwords. A solution to this is to salt and hash the passwords using a tool such as Bcrypt.
4) Private ssh key committed to repository - Gilfoyle's private SSH key being present in his private repository is an enormous security flaw, despite the repository being private. Having the key stored on Gogs allowed for impersonation in an SSH session, and lead to the machine being rooted. Any sensitive information such as passwords and keys should never be stored online in plaintext. 
5) Password reuse on private key file - Reuse of passwords can lead to multiple areas of user accounts being compromised. Despite the extremely strong password (ZEU3N8WNM2rh4T), using it across multiple applications deepens the impact if it is compromised. It is suggested that a variety of passwords are used on different use cases, which can limit damage from one being compromised. 
6) Root OTP creation - The ability for non-root users (such as gilfoyle) to create one-time-passwords for root is extremely dangerous. This lead to an easy root compromise. No users, except root, should be able to create OTPs for root access. It should be the descison of the root user or administrator to give the OTPs on a case-by-case basis. 
